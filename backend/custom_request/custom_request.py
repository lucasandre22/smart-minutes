from utils import chunk_into_documents
from langchain_core.documents import Document
from langchain.chains.combine_documents.base import BaseCombineDocumentsChain

class CustomRequest():
    """
    A class for processing and handling custom requests with transcript chunking and chaining.

    This class provides methods for chunking large text files into smaller document chunks
    and invoking a document processing chain on those chunks or the raw text.

    Attributes:
        chain (BaseCombineDocumentsChain): The chain used to combine and process documents.
        response: The response generated by invoking the chain with documents or text.
    
    Methods:
        __init__(self, chain: BaseCombineDocumentsChain):
            Initializes the CustomRequest object with a document processing chain.
        
        chunk_file_into_documents(self, filePath: str, chunk_size: int) -> list[Document]:
            Chunks the text from a file into smaller documents based on the specified chunk size.
        
        invoke(self, docs: list[Document]):
            Processes the list of Document objects using the provided chain.
        
        invoke(self, text: str):
            Processes the provided text using the provided chain.
    """

    def __init__(self, chain):
        """
        Initializes the CustomRequest object with a document processing chain.

        Args:
            chain (BaseCombineDocumentsChain): The chain used for combining documents.
        """
        self.chain: BaseCombineDocumentsChain = chain
    
    def chunk_file_into_documents(self, filePath: str, chunk_size) -> list[Document]:
        """
        Chunks the text from a file into smaller documents based on the specified chunk size.

        Args:
            filePath (str): The path to the file to be processed.
            chunk_size (int): The size of each chunk in terms of text length.

        Returns:
            list[Document]: A list of Document objects created from the file's content.
        """
        with open(filePath, 'r', encoding='utf-8') as f:
            text = f.read()
        return chunk_into_documents(text, filePath, chunk_size)
    
    def invoke(self, docs: list[Document]):
        """
        Processes the list of Document objects using the provided chain.

        Args:
            docs (list[Document]): A list of Document objects to be processed.

        Returns:
            The response generated by invoking the chain on the provided documents.
        """
        self.response = self.chain(docs)
        return self.response

    def invoke(self, text: str):
        """
        Processes the provided text using the provided chain.

        Args:
            text (str): The text to be processed.

        Returns:
            The response generated by invoking the chain on the provided text.
        """
        self.response = self.chain(text)
        return self.response